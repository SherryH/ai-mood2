// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// In the FrontendMaster AI NextJs course, we need to set "relationMode" on Prisma explicitly. 
// Now we are using NeonDB so it is not needed
// ChatGPT gives a good explanation: https://chatgpt.com/c/d1fc6e68-f30e-4375-bb49-8da40b28c36a

// Define the Models 
model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String @unique
  email   String @unique

  entries JournalEntry[]
}

model JournalEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String @db.Text

  analysis Analysis?

  @@unique([userId,id]) //Both userId and id are needed to uniquely find a journalEntry
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId String
  entry   JournalEntry @relation(fields: [entryId], references: [id])

  mood     String  @db.Text
  subject  String  @db.Text
  summary  String  @db.Text
  color    String  @db.Text
  negative Boolean
  sentimentScore Float @default(0)

  @@unique([entryId]) // one to one relationship Analysis - JournalEntry
}
